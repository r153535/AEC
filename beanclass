import org.springframework.context.annotation.*;
import org.springframework.stereotype.Component;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

// Bean Class
@Component
class MyBean {
    public MyBean() {
        System.out.println("MyBean: Constructor called");
    }

    public void init() {
        System.out.println("MyBean: Initialization logic");
    }

    public void destroy() {
        System.out.println("MyBean: Destruction logic");
    }

    public void doWork() {
        System.out.println("MyBean: Working...");
    }
}

// Bean with Dependencies
@Component
class DependentBean {
    private final MyBean myBean;

    // Constructor Injection
    public DependentBean(MyBean myBean) {
        this.myBean = myBean;
    }

    public void performTask() {
        System.out.println("DependentBean: Using MyBean to perform task.");
        myBean.doWork();
    }
}

// Configuration Class
@Configuration
@ComponentScan(basePackages = "com.example")
public class AppConfig {
    @Bean(initMethod = "init", destroyMethod = "destroy")
    @Scope("singleton")
    public MyBean myBean() {
        return new MyBean();
    }
}

// Main Class
public class BeanInjection {
    public static void main(String[] args) {
        // Create application context and load beans
        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);

        // Fetch and use MyBean
        MyBean myBean = context.getBean(MyBean.class);
        myBean.doWork();

        // Fetch and use DependentBean
        DependentBean dependentBean = context.getBean(DependentBean.class);
        dependentBean.performTask();

        // Close the context (bean destruction lifecycle)
        context.close();
    }
}
